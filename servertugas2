import sys
import socket
import select

HOST = '' 
SOCKET_LIST = []
RECV_BUFFER = 8080 
PORT = 1010
aye = []
username = []
index=0
def chat_server():

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, PORT))
    server_socket.listen(10)
 
    # add server socket object to the list of readable connections
    SOCKET_LIST.append(server_socket)
 
    print "Chat server started on port " + str(PORT)
 
    while 1:

        # get the list sockets which are ready to be read through select
        # 4th arg, time_out  = 0 : poll and never block
        ready_to_read,ready_to_write,in_error = select.select(SOCKET_LIST,[],[],0)
      
        for sock in ready_to_read:
            # a new connection request recieved
            if sock == server_socket: 
                sockfd, addr = server_socket.accept()
                SOCKET_LIST.append(sockfd)
		aye.append(addr)
		#print"List :",aye[]
                print "Client (%s, %s) connected" % addr
#		print "Isi : ",sockfd
                 
#               broadcast(server_socket, sockfd, "[%s:%s] entered our chatting room\n" % addr)
             
            # a message from a client, not a new connection
            else:
                # process data recieved from client, 
                try:
                    # receiving data from the socket.
                    #data = sock.recv(RECV_BUFFER)
                    #if data:
                        # there is something in the socket
			data2 =sock.recv(6)
			#print "dapet : ",data2
			if data2 =='login ' :
			  username.append(sock.recv(6))
			 # print "Username" ,username.pop()
			if data2 =='kirim ' :
			  data3=sock.recv(6)
			 # print"index ", username.index(data3)
			  #print "oke"
			  tujuan=aye[username.index(data3)]
			  #print tujuan
			  data4=sock.recv(RECV_BUFFER)
			  #print data4
			  sock.sendto(data4,tujuan)
			  print tujuan

			if data2 =='daftar' :
			  for index in range(len(username)) :
			      sock.send("\n")
			      sock.send(username[index])
			    # print username[index]
                 	if data2 =='broad ' :
			 data4=sock.recv(RECV_BUFFER)
			 aza=aye.index(sock.getpeername())
			 print aza
			 #print aye.index(aza)
		         broadcast(server_socket, sock,"\r" + '['+ str(username[aza]) +'] ' + data4)  
                # exception 
                except:
                    broadcast(server_socket, sock, "Client (%s, %s) is offline\n" % addr)
                    continue

    server_socket.close()
    
# broadcast chat messages to all connected clients
def broadcast (server_socket, sock, message):
    for socket in SOCKET_LIST:
        # send the message only to peer
        if socket != server_socket and socket != sock :
            try :
                socket.sendall(message)
            except :
                # broken socket connection
                socket.close()
                # broken socket, remove it
                if socket in SOCKET_LIST:
                    SOCKET_LIST.remove(socket)
 
if __name__ == "__main__":

    sys.exit(chat_server())       
